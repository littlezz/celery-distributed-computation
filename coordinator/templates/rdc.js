// Generated by CoffeeScript 1.10.0
(function() {
  var node_dowm, node_up;

  this.tsss = function() {
    return $('#p1').text('???');
  };

  node_dowm = function(ip) {
    return $("#" + ip).transition('fade up');
  };

  node_up = function(ip) {
    return $("#" + ip).transition('fade up');
  };

  $(function() {
    var h, ws;
    h = window.location.host;
    ws = new WebSocket("ws://" + h + "/ws_node_status");
    return ws.onmessage = function(e) {
      var fn, i, ip, len, msg, nn_status, nodes_ip;
      msg = JSON.parse(e.data);
      console.log(msg);
      nodes_ip = Object.keys(msg.node_status);
      fn = function(ip) {
        var old, pert;
        old = $("#" + ip).find('span').text();
        pert = msg.node_status[ip];
        if (pert === "offline") {
          if (old !== "offline") {
            console.log(old);
            node_dowm(ip);
          }
        } else if (old === 'offline') {
          node_up(ip);
        }
        $("#" + ip).data('easyPieChart').update(pert);
        $("#" + ip).find('span').text(pert);
        return $('#' + ip);
      };
      for (i = 0, len = nodes_ip.length; i < len; i++) {
        ip = nodes_ip[i];
        fn(ip);
      }
      nn_status = msg.nn_status;
      $('#speed').contents()[2].nodeValue = nn_status.speed;
      $('#rss').contents()[2].nodeValue = nn_status.rss;
      return ws.send('alive');
    };
  });

  $(function() {
    var i, len, name, ref, results;
    ref = ['localhost', 'node1', 'node2'];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      name = ref[i];
      results.push((function(name) {
        return $('#' + name).easyPieChart({
          animate: 600,
          size: 200,
          barColor: '#ffff00',
          lineWidth: 10
        });
      })(name));
    }
    return results;
  });

}).call(this);

//# sourceMappingURL=rdc.js.map
